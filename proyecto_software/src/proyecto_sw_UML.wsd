@startuml diagrama_clases_dominio
class CoordinadorPrincipal {
    iniciar()
        modelo
    app
    interface_controller
    __init__()
}

class InterfaceController {
    load_css()
    mostrar_login_window()
    iniciar_login()
    mostrar_main_window()
    guardar_taller()
        modelo
    app
    logger
    login_window
    admin_manage_workshop
    main_window
    __init__()
}

class Conexion {
    createConnection()
    getCursor()
    closeConnection()
        _host
    _database
    _user
    _password
    conexion
    conexion
    conexion
    __init__()
}

class AdminDao {
    reset_autoincrement_if_empty()
    insert()
    delete_by_user_id()
    get_admin_id()
    get_usr_admin_id()
    get_all_admins_excluding_actual()
        __init__()
}
Conexion <|-- AdminDao

class ArchDao {
    insert()
    delete_by_user_id()
        __init__()
}
Conexion <|-- ArchDao

class ClientDao {
    insert_client()
    update_client_stats()
    delete_by_user_id()
    get_client_id()
    get_saldo()
    get_num_boughts()
    get_num_sales()
    update_saldo()
        __init__()
}
Conexion <|-- ClientDao

class EmployeeDao {
    insert()
    delete_by_employee_id()
    get_employee_id_from_user_id()
    get_employees_by_admin_id()
    update_admin_id()
        __init__()
}
Conexion <|-- EmployeeDao

class ProductDao {
    insert_product()
    get_filtered_cars()
    get_filtered_others()
    get_client_products()
    delete_product()
    buy_product()
    get_owner_id()
    get_product_price()
        __init__()
}
Conexion <|-- ProductDao

class ReportDao {
    get_purchase_date()
    get_top_buyer()
    get_top_seller()
    get_top_brand()
    get_daily_sales()
    get_totals()
        __init__()
}
Conexion <|-- ReportDao

class ServiceDao {
    insert_service()
    select_all()
    get_employee_by_service_id()
    get_client_by_service_id()
    reset_autoincrement_if_empty()
    get_employee_services()
    delete_service()
    delete_service_by_employee_id()
    hire_service()
        __init__()
}
Conexion <|-- ServiceDao

class UserDao {
    reset_autoincrement_if_empty()
    delete_user_by_id()
    select()
    consultlogin()
    insert()
    get_last_inserted_user_id()
    get_user_rol()
    update_user_profile()
    get_user_password_by_username()
    username_exists()
        __init__()
}
Conexion <|-- UserDao

class WorkshopDao {
    insert_workshop()
    get_zip_code()
        __init__()
}
Conexion <|-- WorkshopDao

class AdminVO {
    passport()
    passport()
    ss_number()
    ss_number()
    dwell_time()
    dwell_time()
    age()
    age()
    first_name()
    first_name()
    second_name()
    second_name()
        passport
    ss_number
    dwell_time
    age
    first_name
    second_name
    _passport
    _ss_number
    _dwell_time
    _age
    _first_name
    _second_name
    __init__()
}

class ArchVO {
    passport()
    passport()
    ss_number()
    ss_number()
    dwell_time()
    dwell_time()
    age()
    age()
    first_name()
    first_name()
    second_name()
    second_name()
        passport
    ss_number
    dwell_time
    age
    first_name
    second_name
    __passport
    __ss_number
    __dwell_time
    __age
    __first_name
    __second_name
    __init__()
}

class AutomobileVO {
    kilometers()
    kilometers()
    engine()
    engine()
    consume()
    consume()
    autonomy()
    autonomy()
        kilometers
    engine
    consume
    autonomy
    environnmental_label
    _kilometers
    _engine
    _consume
    _autonomy
    __init__()
}
ProductVO <|-- AutomobileVO

class ClientVO {
    __str__()
    client_id()
    client_id()
    username()
    username()
    client_email()
    client_email()
    phone_number()
    phone_number()
    password()
    password()
    num_sells()
    num_sells()
    num_buys()
    num_buys()
    cash()
    cash()
        client_id
    username
    client_email
    phone_number
    password
    num_sells
    num_buys
    cash
    _client_id
    _username
    _client_email
    _phone_number
    _password
    _num_sells
    _num_buys
    _cash
    __init__()
}

class EmployeeVO {
    passport()
    passport()
    ss_number()
    ss_number()
    dwell_time()
    dwell_time()
    age()
    age()
    specialization()
    specialization()
    first_name()
    first_name()
    second_name()
    second_name()
        passport
    ss_number
    dwell_time
    age
    specialization
    first_name
    second_name
    __passport
    __ss_number
    __dwell_time
    __age
    __specialization
    __first_name
    __second_name
    __init__()
}

class LoginUserVO {
    username()
    username()
    userpassword()
    userpassword()
        username
    userpassword
    _username
    _userpassword
    __init__()
}

class OtherProductVO {
    size_of()
    size_of()
    used_for()
    used_for()
        size_of
    used_for
    _size_of
    _used_for
    __init__()
}
ProductVO <|-- OtherProductVO

class ProductVO {
    price()
    price()
    brand()
    brand()
    model()
    model()
    year_manufacture()
    year_manufacture()
    plocation()
    plocation()
    ptype()
    ptype()
    pdescription()
    pdescription()
    image_path()
    image_path()
        product_id
    client_id
    price
    brand
    model
    year_manufacture
    plocation
    ptype
    pdescription
    image_path
    _price
    _brand
    _model
    _year_manufacture
    _plocation
    _ptype
    _pdescription
    _image_path
    __init__()
}

class RegisterUserVO {
    user_id()
    user_id()
    username()
    username()
    email()
    email()
    userpassword()
    userpassword()
    phone()
    phone()
    rol()
    rol()
    __str__()
        user_id
    username
    userpassword
    email
    phone
    rol
    _user_id
    _username
    _email
    _userpassword
    _phone
    _rol
    __init__()
}

class ServiceVO {
    __str__()
    serviceid()
    serviceid()
    employeeid()
    employeeid()
    name()
    name()
    description()
    description()
    price()
    price()
        _serviceid
    _employeeid
    _name
    _description
    _price
    _serviceid
    _employeeid
    _name
    _description
    _price
    __init__()
}

class WorkshopVO {
    ws_zip_code()
    ws_zip_code()
    size_of()
    size_of()
    phone_number()
    phone_number()
    inv_parking_slot()
    inv_parking_slot()
    inv_num_pieces()
    inv_num_pieces()
    add_street()
    add_street()
    add_number()
    add_number()
        ws_zip_code
    size_of
    phone_number
    inv_parking_slot
    inv_num_pieces
    add_street
    add_number
    add_city
    _ws_zip_code
    _size_of
    _phone_number
    _inv_parking_slot
    _inv_num_pieces
    _add_street
    _add_number
    __init__()
}

class BusinessObject {
    delete_user()
    comprobarlogin()
    insert()
    registrar_cliente()
    registrar_empleado()
    registrar_admin()
    registrar_arch()
    get_user_rol()
    register_workshop()
    register_product()
    register_service()
    get_client_id()
    get_employee_id()
    get_service_owner_id()
    get_filtered_cars()
    get_filtered_others()
    update_user_profile()
    get_client_products()
    delete_product()
    buy_product()
    hire_service()
    get_owner_id()
    get_saldo_cliente()
    update_client_stats()
    get_top_buyer()
    get_top_seller()
    get_top_brand()
    get_daily_sales()
    get_totals()
    get_purchase_date()
    get_employee_services()
    delete_service()
    get_employees_by_admin_id()
    delete_employee()
    get_admins_excluding_actual()
    delete_admin()
    get_admin_id_by_user_id()
    get_employee_id_from_user_id()
    username_exists()
        __init__()
}

class LoggerSingleton {
    __new__()
    add_log_activity()
    print_log()
    get_log()
    clear_log()
        __init__()
}

AdminDao --> AdminVO : gestiona
ArchDao --> ArchVO : gestiona
ClientDao --> ClientVO : gestiona
EmployeeDao --> EmployeeVO : gestiona
ProductDao --> ProductVO : gestiona
ServiceDao --> ServiceVO : gestiona
UserDao --> RegisterUserVO : gestiona
UserDao --> LoginUserVO : gestiona
WorkshopDao --> WorkshopVO : gestiona
ProductVO <|-- AutomobileVO : especializa
ProductVO <|-- OtherProductVO : especializa
BusinessObject --> CoordinadorPrincipal : utiliza
BusinessObject --> InterfaceController : utiliza
BusinessObject --> AdminDao : utiliza
BusinessObject --> ArchDao : utiliza
BusinessObject --> ClientDao : utiliza
BusinessObject --> EmployeeDao : utiliza
BusinessObject --> ProductDao : utiliza
BusinessObject --> ServiceDao : utiliza
BusinessObject --> ReportDao : utiliza
BusinessObject --> UserDao : utiliza
BusinessObject --> WorkshopDao : utiliza
BusinessObject --> LoggerSingleton : utiliza
LoggerSingleton --> InterfaceController : utiliza
LoggerSingleton --> CoordinadorPrincipal : utiliza

@enduml

